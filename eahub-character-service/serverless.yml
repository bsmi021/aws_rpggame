service: sascraft-character-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-CHARACTERS-${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - sqs:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

package:
  exclude:
    - env/**
    - node_modules/**
    - secrets.yml
    - .gitignore

functions:
  create:
    handler: characters/create.create
    events:
      - http:
          path: characters
          method: post
          cors: true
  # update:
  #   handler: characters/update.handler
  #   events:
  #     - http:
  #         path: characters/{id}
  #         method: put
  #         cors: true
  add_xp:
    handler: characters/add_xp.add_xp
    events:
      - http:
          path: characters/{id}/add_xp
          method: put
          cors: true

  add_item:
    handler: characters/add_item.add_item
    events:
      - http:
          path: characters/{id}/add_item
          method: put
          cors: true

  remove_item:
    handler: characters/remove_item.remove_item
    events:
      - http:
          path: characters/{id}/remove_item
          method: put
          cors: true

  unequip_item:
    handler: characters/unequip_item.unequip_item
    events:
      - http:
          path: characters/{id}/unequip_item
          method: put
          cors: true

  equip_item:
    handler: characters/equip_item.equip_item
    events:
      - http:
          path: characters/{id}/equip_item
          method: put
          cors: true
  get:
    handler: characters/get.get
    events:
      - http:
          path: characters/{id}
          method: get
          cors: true
  list:
    handler: characters/list.list
    events:
      - http:
          path: characters
          method: get
          cors: true

resources:
  Resources:
    CharactersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: 'player_level-level-index'
            KeySchema:
              - AttributeName: player_level
                KeyType: 'HASH'
              - AttributeName: level
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: 'level-player_class-index'
            KeySchema:
              - AttributeName: level
                KeyType: 'HASH'
              - AttributeName: player_class
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: false
