service: sascraft-char-aggr-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  stage: dev
  environment:
    ITEM_SERVICE: sascraft-item-service-${opt:stage, self:provider.stage}-get
    LIST_ITEM_SERVICE: sascraft-item-service-${opt:stage, self:provider.stage}-list
    CHAR_ADDITEM_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-add_item
    CHAR_EQUIP_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-equip_item
    CHAR_UNEQUIP_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-unequip_item
    CHAR_REMOVEITEM_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-remove_item
    GET_CHAR_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-get
    LIST_CHAR_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-list
    CHAR_CREATE_SERVICE: sascraft-character-service-${opt:stage, self:provider.stage}-create
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - lambda:InvokeFunction
      Resource:
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-item-service-${opt:stage, self:provider.stage}-get'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-item-service-${opt:stage, self:provider.stage}-list'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-add_item'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-equip_item'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-unequip_item'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-get'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-remove_item'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-list'
        - 'arn:aws:lambda:${opt:region, self:provider.region}:*:function:sascraft-character-service-${opt:stage, self:provider.stage}-create'
package:
  exclude:
    - env/**
    - node_modules/**
    - secrets.yml
    - .gitignore

functions:
  list:
    handler: aggregates/list.handler
    events:
      - http:
          path: characters
          method: get
          cors: true
  get:
    handler: aggregates/get.handler
    events:
      - http:
          path: characters/{id}
          method: get
          cors: true
  equip_item:
    handler: aggregates/equip_item.handler
    events:
      - http:
          path: characters/{id}/equip_item
          method: put
          cors: true
  remove_item:
    handler: aggregates/remove_item.handler
    events:
      - http:
          path: characters/{id}/remove_item
          method: put
          cors: true
  add_item:
    handler: aggregates/add_item.handler
    events:
      - http:
          path: characters/{id}/add_item
          method: put
          cors: true
  unequip_item:
    handler: aggregates/unequip_item.handler
    events:
      - http:
          path: characters/{id}/unequip_item
          method: put
          cors: true
  create:
    handler: aggregates/create.handler
    timeout: 30
    events:
      - http:
          path: characters
          method: post
          cors: true

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: false
