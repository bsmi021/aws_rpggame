service: sascraft-fight-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  stage: dev
  environment:
    DYNAMODB_FIGHT_TABLE: ${self:service}-FIGHTS-${opt:stage, self:provider.stage}
    DYNAMODB_ATTACK_TABLE: ${self:service}-ATTACKS-${opt:stage, self:provider.stage}
    DYNAMODB_CHAR_FIGHT_TABLE: ${self:service}-CHARACTER_FIGHTS_MAP-${opt:state, self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - sqs:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_FIGHT_TABLE}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_ATTACK_TABLE}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CHAR_FIGHT_TABLE}'

package:
  exclude:
    - env/**
    - node_modules/**
    - secrets.yml
    - .gitignore

functions:
  create:
    handler: fights/create.create
    events:
      - http:
          path: fights
          method: post
          cors: true
  get:
    handler: fights/get.get
    events:
      - http:
          path: fights/{id}
          method: get
          cors: true
  list:
    handler: fights/list.list
    events:
      - http:
          path: fights
          method: get
          cors: true

  charfightslist:
    handler: fights/charlist.list
    events:
      - http:
          path: fights/characters/{id}
          method: get
          cors: true

  attack:
    handler: fights/attack.attack
    events:
      - http:
          path: fights/{id}/attack
          method: put
          cors: true

  listattacks:
    handler: fights/list_attacks.list
    events:
      - http:
          path: fights/{id}/attacks
          method: get
          cors: true

resources:
  Resources:
    FightsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_FIGHT_TABLE}
    AttacksDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: fight_id
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: fight_id
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_ATTACK_TABLE}

    CharFightsMapDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: char_id
            AttributeType: S
          - AttributeName: fight_id
            AttributeType: S
        KeySchema:
          - AttributeName: char_id
            KeyType: HASH
          - AttributeName: fight_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_CHAR_FIGHT_TABLE}

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}
  pythonRequirements:
    dockerizePip: false
